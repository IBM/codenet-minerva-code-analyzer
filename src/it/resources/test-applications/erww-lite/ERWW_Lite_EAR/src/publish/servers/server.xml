<server description="erwwLibertyServer">
	<transaction totalTranLifetimeTimeout="12000s"/>
	<!-- Enable features -->
	<featureManager>
		<!-- for osgi apps or optional...        
        <feature>blueprint-1.0</feature>
        <feature>osgi.jpa-1.0</feature>
        <feature>wab-1.0</feature>        
        <feature>wmqJmsClient-1.1</feature>  
        <feature>wasJmsSecurity-1.0</feature>
		
		-->
		<feature>apiDiscovery-1.0</feature>
		<feature>appSecurity-2.0</feature>
		<feature>batch-1.0</feature>
		<feature>beanValidation-1.1</feature>
		<feature>cdi-1.2</feature>
		<feature>concurrent-1.0</feature>
		<feature>ejb-3.2</feature>
		<feature>el-3.0</feature>
		<feature>jsonp-1.0</feature>
		<feature>jaxrs-2.0</feature>
		<feature>jaxws-2.2</feature>
		<feature>jdbc-4.1</feature>
		<feature>jndi-1.0</feature>
		<feature>jpa-2.1</feature>
		<feature>jsf-2.2</feature>
		<feature>jsp-2.3</feature>
		<feature>localConnector-1.0</feature>
		<feature>restConnector-1.0</feature>
		<feature>rtcomm-1.0</feature>
		<feature>servlet-3.1</feature>
		<feature>sessionDatabase-1.0</feature>
		<feature>ssl-1.0</feature>
		<feature>wasJmsClient-2.0</feature>
		<feature>wasJmsServer-1.0</feature>
		<feature>webCache-1.0</feature>
		<feature>websocket-1.1</feature>
		<feature>wsSecurity-1.1</feature>
	</featureManager>
	
	<httpEndpoint host="*" httpPort="9080" httpsPort="9444" id="defaultHttpEndpoint"/>

	<httpSession invalidateOnUnauthorizedSessionRequestException="true"/>
	<applicationMonitor updateTrigger="mbean"/>
	<rtcomm messageServerHost="messagesight.demos.ibm.com" messageServerPort="1883" rtcommTopicPath="/erwwLitege/" sharedSubscriptionPath="">
		<callQueue callQueueID="Appliances" description="Appliances Queue"/>
	</rtcomm>
	
	<variable name="mqttHost" value="messagesight.demos.ibm.com"/>
	<variable name="mqttPort" value="1883"/>
	<variable name="rtcommTopicPath" value="erwwLitege"/>
	<jndiEntry id="mqttHost" jndiName="mqttHost" value="${mqttHost}"/>
	<jndiEntry id="mqttPort" jndiName="mqttPort" value="${mqttPort}"/>
	<jndiEntry id="rtcommTopicPath" jndiName="rtcommTopicPath" value="${rtcommTopicPath}"/>
	
	<jdbcDriver id="myJDBCDriver" libraryRef="DB2JCC4LIB"/>
	<library apiTypeVisibility="spec,ibm-api,third-party" filesetRef="db2jcc4" id="DB2JCC4LIB"/>
	<fileset dir="${shared.resource.dir}/db2drivers" id="db2jcc4" includes="db2jcc4.jar db2jcc_license_cu.jar"/>
		
	<!-- Nichole ERWW Tables -->
	<dataSource id="ERWWDataSourceWithPwd" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/ERWWDataSourceWithPwd" type="javax.sql.XADataSource">
		<properties.db2.jcc currentSchema="CBIVP" databaseName="ERWW" driverType="4" password="{xor}NT4pPmYsKSs=" portNumber="50000" serverName="paix625.rtp.raleigh.ibm.com" traceLevel="-1" user="db2inst1"/>
	</dataSource>
	<dataSource containerAuthDataRef="DBConnectionAlias" id="ERWWDataSourceWithJaasAlias" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/ERWWDataSourceWithJaasAlias" type="javax.sql.XADataSource">
		<properties.db2.jcc currentSchema="CBIVP" databaseName="ERWW" driverType="4" portNumber="50000" serverName="paix625.rtp.raleigh.ibm.com"/>
	</dataSource>
	<dataSource id="DefaultDataSource" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/DefaultDataSource" type="javax.sql.XADataSource">
		<properties.db2.jcc databaseName="ERWW" driverType="4" password="{xor}NT4pPmYsKSs=" portNumber="50000" serverName="paix625.rtp.raleigh.ibm.com" useTransactionRedirect="true" user="db2inst1"/>
	</dataSource>
	
	<managedScheduledExecutorService jndiName="concurrent/ERWWManagedScheduledExecutor">
		<contextService>
			<classloaderContext/>
			<jeeMetadataContext/>
			<securityContext/>
		</contextService>
	</managedScheduledExecutorService>
	
	<!-- Embedded messaging engine configuration     	       -->
	<!--                                                       -->
	<!-- Note:  All physical resources in the actual messaging -->
	<!-- engine are named "ME_xxx" below to make it clear they -->
	<!-- are the real resources in the messaging engine, as    -->
	<!-- opposed to the JEE "logical" resources defined below  -->
	<!-- that map the application to these resources.          -->
	<messagingEngine>
		<queue id="ME_PriceChangeRequestQ"> </queue>
		<queue id="ME_PriceChangeReplyQ"> </queue>
		<queue id="ME_DeliveryRequestQ"> </queue>
		<queue id="ME_NewOrderRequestQ"> </queue>
		<queue id="ME_NewOrderReplyQ"> </queue>
		<queue id="ME_MonitorQ1.0"> </queue>
		<queue id="ME_MonitorQ1.1"> </queue>
		<messagingSecurity>
			<role name="tester">
				<queuePermission queueRef="ME_PriceChangeRequestQ">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_PriceChangeReplyQ">
					<action>SEND</action>
					<action>RECEIVE</action>
				</queuePermission>
				<queuePermission queueRef="ME_DeliveryRequestQ">
					<action>SEND</action>
					<action>RECEIVE</action>
				</queuePermission>
				<queuePermission queueRef="ME_NewOrderRequestQ">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_NewOrderReplyQ">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_MonitorQ1.0">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_MonitorQ1.1">
					<action>ALL</action>
				</queuePermission>
				<tempDestinationPermission prefix="temp">
					<action>CREATE</action>
					<action>SEND</action>
					<action>RECEIVE</action>
				</tempDestinationPermission>
				<!--  Make a different set of temporary permissions to only use in Delivery JMS. -->
				<!--  This is to test that customers can set specific permissions for sub-set of their temporary queues -->
				<tempDestinationPermission prefix="ME.DeReplyQ">
					<action>CREATE</action>
					<action>SEND</action>
					<action>RECEIVE</action>
				</tempDestinationPermission>
				<topicPermission topicSpaceRef="Default.Topic.Space">
					<action>SEND</action>
					<action>RECEIVE</action>
				</topicPermission>
				<user name="persona1"/>
			</role>
		</messagingSecurity>
	</messagingEngine>
	
	<!-- Resources required by the PriceChangeJMSLite transaction.    -->
	<!-- This set of resources uses the "old" (uid/pwd) way of doing  -->
	<!-- connection authentication.                                   -->
	<jmsQueueConnectionFactory jndiName="jms/PriceChangeQueueCF">
		<properties.wasJms password="{xor}Ly86LSwwMT5u" userName="persona1"/>
	</jmsQueueConnectionFactory>
	<jmsQueue id="PriceChangeRequestQ" jndiName="jms/PriceChangeRequestQ">
		<properties.wasJms queueName="ME_PriceChangeRequestQ"/>
	</jmsQueue>
	<jmsQueue id="PriceChangeReplyQ" jndiName="jms/PriceChangeReplyQ">
		<properties.wasJms queueName="ME_PriceChangeReplyQ"/>
	</jmsQueue>
	
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec id="jms/PriceChangeActivationSpec">
		<properties.wasJms destinationRef="PriceChangeRequestQ" password="{xor}Ly86LSwwMT5u" userName="persona1"/>
	</jmsActivationSpec>
	
	<!-- Resources required by the DeliveryJMSLite transaction.    -->
	<!-- This set of resources does security authentication using  -->
	<!-- the JaaS security Alias, rather than the older uid/pwd    -->
	<!-- mechanism.                                                -->
	<!--                                                           -->
	<!-- Note: all temporary queues created by the DeliveryQueueCF -->
	<!-- below will have messaging engine assigned names that are  -->
	<!-- prefixed by "ME.DeReplyQ" -->
	<jmsQueueConnectionFactory jndiName="jms/DeliveryQueueCF">
		<properties.wasJms temporaryQueueNamePrefix="ME.DeReplyQ"/>
	</jmsQueueConnectionFactory>
	<jmsTopicConnectionFactory jndiName="jms/DeliveryTopicCF">
		<properties.wasJms/>
	</jmsTopicConnectionFactory>
	<jmsQueue id="DeliveryRequestQ" jndiName="jms/DeliveryRequestQ">
		<properties.wasJms queueName="ME_DeliveryRequestQ"/>
	</jmsQueue>
	<jmsTopic id="DeliveryLogTopic" jndiName="jms/DeliveryLogTopic">
		<properties.wasJms topicName="ME_DeliveryLogTopic"/>
	</jmsTopic>
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/DeliveryActivationSpec">
		<properties.wasJms destinationRef="DeliveryRequestQ"/>
	</jmsActivationSpec>
	
	<!-- Resources required by the NewOrderJMSLite transaction.    -->
	<!-- This set of resources does security authentication using  -->
	<!-- the JaaS security Alias, rather than the older uid/pwd    -->
	<!-- mechanism.                                                -->
	<jmsConnectionFactory jndiName="jms/NewOrderCF">
		<properties.wasJms/>
	</jmsConnectionFactory>
	<jmsQueueConnectionFactory jndiName="jms/NewOrderQueueCF">
		<properties.wasJms/>
	</jmsQueueConnectionFactory>
	<jmsTopicConnectionFactory jndiName="jms/NewOrderTopicCF">
		<properties.wasJms/>
	</jmsTopicConnectionFactory>
	<jmsQueue id="NewOrderRequestQ" jndiName="jms/NewOrderRequestQ">
		<properties.wasJms queueName="ME_NewOrderRequestQ"/>
	</jmsQueue>
	<jmsQueue id="NewOrderResponseQ" jndiName="jms/NewOrderReplyQ">
		<properties.wasJms queueName="ME_NewOrderReplyQ"/>
	</jmsQueue>
	<jmsTopic id="NewOrderLogTopic" jndiName="jms/NewOrderLogTopic">
		<properties.wasJms topicName="ME_NewOrderLogTopic"/>
	</jmsTopic>
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/NewOrderActivationSpec">
		<properties.wasJms destinationRef="NewOrderRequestQ"/>
	</jmsActivationSpec>
	
	<!-- Resources required by the WebMonitorTransactionsLite_WebSockets transaction.           -->
	<!-- This set of resources uses the "old" (uid/pwd) way of doing connection authentication. -->
	<jmsQueueConnectionFactory jndiName="jms/MonitorQueueCF1.0">
		<properties.wasJms password="{xor}Ly86LSwwMT5u" userName="persona1"/>
	</jmsQueueConnectionFactory>
	<jmsQueueConnectionFactory jndiName="jms/MonitorQueueCF1.1">
		<properties.wasJms password="{xor}Ly86LSwwMT5u" userName="persona1"/>
	</jmsQueueConnectionFactory>
	<jmsQueue id="jms/MonitorQ1.0" jndiName="jms/MonitorQ1.0">
		<properties.wasJms queueName="ME_MonitorQ1.0"/>
	</jmsQueue>
	<jmsQueue id="jms/MonitorQ1.1" jndiName="jms/MonitorQ1.1">
		<properties.wasJms queueName="ME_MonitorQ1.1"/>
	</jmsQueue>
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/WebSocketsMonitorActiviationSpec1.0">
		<properties.wasJms destinationRef="jms/MonitorQ1.0"/>
	</jmsActivationSpec>
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/WebSocketsMonitorActiviationSpec1.1">
		<properties.wasJms destinationRef="jms/MonitorQ1.1"/>
	</jmsActivationSpec>
	
	<!--  Security configuration -->
	<wsSecurityClient internal.properties="" ws-security.password="{xor}LDo8Ki02KyY=" ws-security.username="user1"/>
	<basicRegistry id="BasicRealm" realm="BasicRealm">
		<user name="wsadmin" password="{xor}LDo8Ki02KyY="/>
		<user name="persona1" password="{xor}Ly86LSwwMT5u"/>
		<user name="persona11" password="{xor}Ly86LSwwMT5ubg=="/>
		<user name="persona21" password="{xor}Ly86LSwwMT5tbg=="/>
		<user name="user1" password="{xor}LDo8Ki02KyY="/>
		<user name="user11" password="{xor}LDo8Ki02KyY="/>
		<group name="g11-20">
			<member name="persona11"/>
		</group>
		<group name="group11">
			<member name="user11"/>
		</group>
	</basicRegistry>
	<ssl id="defaultSSLConfig" keyStoreRef="defaultKeyStore" sslProtocol="TLSv1.2"/>
	<keyStore id="defaultKeyStore" password="{xor}LCkrayYwKg=="/>
	<administrator-role>
		<user>wsadmin</user>
	</administrator-role>
	<authData id="JMSConnectionAlias" password="{xor}Ly86LSwwMT5u" user="persona1"/>

	<!-- Nichole ERWW Tables  -->
	<authData id="DBConnectionAlias" password="{xor}NT4pPmYsKSs=" user="db2inst1"/>
	
	<!-- 
	<logging traceSpecification="*=info=enabled:com.ibm.ws.cache.*=all=enabled:com.ibm.wsspi.cache.*=all=enabled"/> 
 	<logging consoleLogLevel="WARNING"/>
	<logging traceSpecification="*=info=enabled:com.ibm.ws.webcontainer*=all:com.ibm.wsspi.webcontainer*=all:HTTPChannel=all:TCPChannel=all:GenericBNF=all" maxFileSize="80" maxFiles="10" traceFormat="BASIC"/>
    
	<logging traceSpecification="*=info=enabled:com.ibm.ws.jdbc.*=all=enabled:com.ibm.ws.rsadapter.*=all=enabled:com.ibm.ejs.j2c.*=all=enabled"/> 
   
	<logging traceSpecification="*=info=enabled:WAS.j2c=all=enabled:RRA=all=enabled:Transaction=all=enabled"/>
    
	<logging traceSpecification="*=info:com.ibm.ws.db2.logwriter=all" />
   
	<logging traceSpecification="*=info=enabled:WAS.j2c=all=enabled:RRA=all=enabled:Transaction=all=enabled"/>
 
	<logging traceSpecification="*=info:JCDI=all:com.ibm.ws.cdi*=all:org.jboss.*=all:Injection=all"/>

	<logging traceSpecification="*=info:JCDI=all:com.ibm.ws.cdi*=all:org.jboss.*=all:Injection=all"/>
  
	<logging traceSpecification="*=info:BeanValidation=all:beanvalidation.*=all:org.apache.bval.*=all"/>
  
	<logging traceSpecification="*=info:JCDI=all:com.ibm.ws.cdi*=all:com.ibm.ws.weld*=all:org.jboss.*=all:Injection=all:EJBContainer=all"/>
  
	<logging traceSpecification="*=info:BeanValidation=all:beanvalidation.*=all:org.apache.bval.*=all"/>
  
	<logging traceSpecification="*=info:Transaction=all:JCDI=all:com.ibm.ws.cdi*=all:org.jboss.*=all:Injection=all"/>   
 
	<logging traceSpecification="*=info:JPA=all"/>  
 
	<logging traceSpecification="JCDI=all:com.ibm.ws.cdi*=all:com.ibm.ws.weld*=all:org.jboss.*=all"/>   
  
	<logging traceSpecification="*=info:BeanValidation=all:beanvalidation.*=all:org.apache.bval.*=all"/>
 
	<logging maxFileSize="0" maxFiles="1" traceSpecification="JCDI=all:beanValidation=all"/>
 
	<logging traceSpecification="com.ibm.ws.kernel.feature.internal.Provisioner=all"/>
 
 -->
     <!-- <enterpriseApplication id="ERWW_Lite_WS_Client_EAR" location="ERWW_Lite_WS_Client_EAR-0.0.1-SNAPSHOT.ear" name="ERWW_Lite_WS_Client_EAR"/> -->

    <enterpriseApplication id="ERWW_Lite_EAR" location="ERWW_Lite_EAR.ear" name="ERWW_Lite_EAR">
        <classloader apiTypeVisibility="ibm-api,spec,third-party" commonLibraryRef="DB2JCC4LIB"/>
    </enterpriseApplication>
 
	<applicationMonitor updateTrigger="mbean"/>
</server>