//***********************************************************
// This class is a copy of the client found in the 
// WebStockLevelEJB module.   It exists here so that
// this function can be invoked by the Non Persistent Timer
// bean classes.  I also changed this class to now be a Singleton
// session bean.
//
// Functionality Tested:
//		EJB 3.x - Singleton Session Bean defined with @Singleton
//  	EJB 3.x - No Interface view for Singleton Session Bean.
//
//***********************************************************
package stocklevelsession;

import irwwbase.ExtendedRandom;
import irwwbase.IRWWBase;
import irwwbase.MaxValues;
import irwwbase.UserException;

import java.io.Serializable;

import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.ejb.Singleton;
import jakarta.ejb.LockType;
import jakarta.ejb.Lock;
/* Remove unused imports
import stocklevelsession.StockLevelInput;
import stocklevelsession.StockLevelOutput;
import stocklevelsession.StockLevelSessionFacade;
*/
// Allow multi-threaded access to this beans methods without blocking (ie. READ).
// Make sure this bean is stateless, or uses read only data, so that no writer
// threads will walk on each other.
@Singleton
@Lock(LockType.READ)
public class ClientBean extends IRWWBase implements Serializable {

	/**
	 * UUID generated by RAD
	 */
	private static final long serialVersionUID = -6991975021269598134L;
	
	private byte database;
	
		
	@EJB
	StockLevelSessionFacade slsessionLocal;

	/**
	 * StockLevelClient constructor comment.
	 */
	public ClientBean() {
		super();

	}
	
	@PostConstruct 
	public void postConstruct() {
		database = dbSize();
	}

	/**
	 * Insert the method's description here. Creation date: (9/4/00 11:11:12 AM)
	 * 
	 * @return stockLevelSessionPackage.StockLevelInput
	 * @param db
	 *            byte
	 */
	private StockLevelInput generateStockLevelInput(byte db) {

		ExtendedRandom rand = new ExtendedRandom();

		StockLevelInput input = new StockLevelInput();
		// 
		// use the min/max method to keep the generation within the desired
		// range.
		// do not add 1 any longer.
		// 
		input.setWarehouseId((short) rand.nextInt(1, MaxValues.warehouseId(db)));
		input.setDistrictId((short) rand.nextInt(1, MaxValues.districtId(db)));
		input.setThreshold(rand.nextInt(MaxValues.stockLevelLowerThreshold(db),
				MaxValues.stockLevelUpperThreshold(db)));

		return input;
	}


	/**
	 * Insert the method's description here. Creation date: (9/26/2001 4:24:34
	 * PM)
	 * 
	 * @throws Exception
	 */
	public void webAutoGenInput() throws UserException {

		displayOut("Running StockLevel from an EJB Timer");
		displayOut("Starting Time is: " + new java.util.Date().toString()
				+ ", milliseconds: "
				+ String.valueOf(System.currentTimeMillis()));

		StockLevelOutput output = new StockLevelOutput();
		StockLevelInput input = new StockLevelInput();

		input = this.generateStockLevelInput(database);

		debugOut("generated input for stock level is WarehouseId: " + input.getWarehouseId() + " DistrictId: "
				+ input.getDistrictId() + " Threshold: " + input.getThreshold());

		// this is local EJB calls only, no remote EJB calls on Liberty

		debugOut("Before output = slsession.stockLevelsession(input);");
		try {
			output = slsessionLocal.stockLevelSession(input);
			debugOut("EJB timer based StockLevel execution was successful. Stock level is: "  + output.getLowStock());
		} catch (UserException ux) {
			// If we catch user exception just re-throw it.
			debugOut("EJB timer based StockLevel execution failed with UserException: " + ux);
			throw ux;
		} catch (Throwable t) {
			// If we catch unexpected exceptions, turn them into user exceptions and re-throw.
			debugOut("EJB timer based StockLevel execution failed with Unexpected Exception: " + t);
			throw new UserException(t.getMessage());		
		}

	}

}
