package irwwbase;

//
// Class that extends the java standard class Random
// 

public class ExtendedRandom extends java.util.Random {

   /**
	 * Autogenerated UID
	 */
	private static final long serialVersionUID = 1L;
private String lastNameParts[] = { "BAR", "OUGHT", "ABLE", "PRI", "PRES", "ESE",
									  "ANTI", "CALLY", "ATION", "EING" };

public ExtendedRandom() {
	//
	// LAA:  This method was modified to force a random seed value to prevent duplicates from being 
	//       generated when requests are made within the timeframe. The basic issue is that the Random class
	//       is not very random as its algorithm is dependent on the system clock.  So I have introduced a 
	//       new seed value that is much more random than the Random class itself. If that makes any sense.  
	// 
	// 
	    
	super(irwwbase.ERWWUUID.getInstance().getLongERWWUUID()); 
}
public ExtendedRandom(long seed) {
	super(seed);
}
   //
   // Method returns true if a random interger selected between 0 and total
   // is between 0 and good
   //

public boolean nextBoolProb( int good, int total ) {
   return (nextInt( total ) < good);
}
   //
   // Method that returns a random double between 0 and n
   //

public double nextDouble( int n ){
	return (double) (Math.floor((this.nextFloat() * n) * 100.0 + 0.5) / 100.0);
	//returned double is rounded to 2 decimals
   
   //return (double) (this.nextFloat() * n);
}
   //
   // Method that returns a random integer between 0 and n (n excluded)
   //

public int nextInt( int n ) {
	return (int) (this.nextFloat() * n);
}
   //
   // Method that returns a random integer between n and m (m included)
   // This method does not work if n > 1. sorry... 
   //

public int nextInt( int n, int m ) {
	
	
   return n + nextInt( (m-n) + 1);
}
   //
   // Method that returns a random integer as string with length length. 
   // If necessary proceding 0s are inserted.The value is between 0 and n. 
   //

public String nextIntString( int n, byte length) {
   String iString = Integer.valueOf( 1 + this.nextInt( n ) ).toString();
   while (iString.length() < length) {
	  iString = "0" + iString;
   }
   return iString;
}
   //
   // Method creates a random last name, using the syllables defined above
   //

public String nextName( byte size ) {

	//Note:  size used to be used to change the logic here when the DB size was small,
	//       but that is not being done any longer so it is ignored.
	
	String name= " ";

	int number = nextInt(1000);

	name = new String( lastNameParts[number / 100] );
	number %= 100;
	name += lastNameParts[number / 10];
	number %= 10;
	name += lastNameParts[number];


	return name;
}

}
