<server description="erwwLibertyServer">
	<!-- Enable features -->
	<featureManager>
		<!-- for osgi apps or optional...        
        <feature>blueprint-1.0</feature>
        <feature>osgi.jpa-1.0</feature>
        <feature>wab-1.0</feature>        
        <feature>wmqJmsClient-3.0</feature>  
        <feature>wasJmsSecurity-3.0</feature>
		-->
		<feature>appSecurity-5.0</feature>
		<feature>batch-2.1</feature>
		<feature>beanValidation-3.0</feature>
		<feature>cdi-4.0</feature>
		<feature>concurrent-3.0</feature>
		<feature>enterpriseBeans-4.0</feature>
		<feature>expressionLanguage-5.0</feature>
                <feature>faces-4.0</feature>
                <feature>jdbc-4.3</feature>
                <feature>jndi-1.0</feature>
		<feature>jsonp-2.1</feature>
		<feature>ldapRegistry-3.0</feature>
		<feature>localConnector-1.0</feature>
                <feature>mdb-4.0</feature>
                <feature>messaging-3.1</feature>
                <feature>messagingClient-3.0</feature>
                <feature>messagingSecurity-3.0</feature>
                <feature>messagingServer-3.0</feature>
                <feature>monitor-1.0</feature>
                <feature>pages-3.1</feature>
                <feature>persistence-3.1</feature>
                <feature>requestTiming-1.0</feature>
                <feature>restConnector-2.0</feature>
                <feature>restfulWS-3.1</feature>
                <feature>servlet-6.0</feature>
                <feature>sessionDatabase-1.0</feature>
                <feature>ssl-1.0</feature>
                <feature>webCache-1.0</feature>
                <feature>websocket-2.1</feature>
                <feature>wsSecurity-1.1</feature>
                <feature>xmlBinding-4.0</feature>
                <feature>xmlWS-4.0</feature>
	</featureManager>
	
	<!-- Variables that should be set to match your environment -->
	<variable name="mqttHost" value="messagesight.demos.ibm.com"/>
	<variable name="mqttPort" value="1883"/>
	<variable name="ldapPort" value="9389" />
	<variable name="ldapBackupHost" value="nest-ldap-1.fyre.ibm.com" />
	<variable name="ldapBackupPort" value="9389" />
	<variable name="ldapBaseDN" value="o=ibm,c=us" />
	<variable name="ldapType" value="IBM Tivoli Directory Server" />
	<variable name="ldapHost" value="nest-ldap-2.fyre.ibm.com" />
	<variable name="rtcommTopicPath" value="erwwLite"/>
	<variable name="httpPort" value="9080" />
 	<variable name="httpsPort" value="9444" />
 	<variable name="iiopPort" value="9501" />
 	<variable name="iiopsPort" value="9601" />
 	<variable name="cloneId" value="server1" />
 	<variable name="dbName" value="ERWW" />
 	<variable name="dbUser" value="db2inst1" />
 	<variable name="dbPassword" value="{xor}MzorMjpuMW1xbW9tbg5u" />
	<!-- Either uncommment this line or put a variable name DB2HOST in the server.env file -->
 	<!-- <variable name="DB2HOST" value="yourDBHostHere" /> -->
 	<variable name="dbPort" value="50000" />
 	<variable name="dbSQLID" value="CBIVP" />
 	<variable name="jdbcPath" value="/usr/lpp/db2/db2v12/jdbc" /> <!-- zOS specific -->
 	<variable name="jmsPort" value="7301" />
 	<variable name="jmsSSLPort" value="7401" />
 	<variable name="jmsUser" value="persona1" />
	<variable name="jmsPassword" value="{xor}Ly86LSwwMT5u" />
 	<variable name="mqHost" value="ztesti0.pok.stglabs.ibm.com" />
 	<variable name="mqPort" value="1411" />
 	<variable name="mqChannel" value="WAS.JMS.SVRCONN" />
 	<variable name="mqQueueManager" value="MQIE" />
 	<variable name="wsUser" value="user1" />
 	<variable name="wsPassword" value="{xor}LDo8Ki02KyY=" />
 	<variable name="clientEarName" value="ERWW_Lite_WS_Client_EAR.ear"/>
 	<variable name="erwwEarName" value="ERWW_Lite_EAR.ear"/>
 	<variable name="jdbcLibraryName" value="DB2JCC4LIB" /> <!-- other valid value is DB2T2LibRef and is for zOS DB2 type 2 -->
 	<variable name="wmqJmsClient.rar.location" value="/WebSphere_LP/usr/shared/resources/MQ9/wmq/wmq.jakarta.jmsra.rar" />

	<!-- Common configuration for server -->
	<executor id="default" coreThreads="300" maxThreads="2000" keepAlive="60s" stealPolicy="STRICT" rejectedWorkPolicy="CALLER_RUNS" />
	<httpEndpoint host="*" httpPort="${httpPort}" httpsPort="${httpsPort}" id="defaultHttpEndpoint">
 		<tcpOptions soReuseAddr="true" inactivityTimeout="1200s"/>
 		<httpOptions persistTimeout="1200s" readTimeout="1200s" writeTimeout="1200s" maxKeepAliveRequests="-1"/>
 	</httpEndpoint>
	<iiopEndpoint id="myIiopEndpoint" iiopPort="${iiopPort}">
  		<iiopsOptions iiopsPort="${iiopsPort}" sslRef="defaultSSLConfig" />
 	</iiopEndpoint>
	<orb id="defaultOrb" iiopEndpointRef="myIiopEndpoint" />
	<httpSession cloneId="${cloneId}" invalidationTimeout="180" invalidateOnUnauthorizedSessionRequestException="true"/>
	<transaction totalTranLifetimeTimeout="600s" propogatedOrBMTTranLifetimeTimeout="600s" clientInactivityTimeout="600s" />
	<requestTiming hungRequestThreshold="10m" slowRequestThreshold="5m"/>
	<applicationMonitor updateTrigger="mbean"/>
	
	<!-- rtcomm configuration -->
	<rtcomm messageServerHost="${mqttHost}" messageServerPort="${mqttPort}" rtcommTopicPath="${rtcommTopicPath}" sharedSubscriptionPath="">
		<callQueue callQueueID="Appliances" description="Appliances Queue"/>
	</rtcomm>	
	<jndiEntry id="mqttHost" jndiName="mqttHost" value="${mqttHost}"/>
	<jndiEntry id="mqttPort" jndiName="mqttPort" value="${mqttPort}"/>
	<jndiEntry id="rtcommTopicPath" jndiName="rtcommTopicPath" value="${rtcommTopicPath}"/>
	
	<!-- DB2 distributed configuration -->
	<jdbcDriver id="myJDBCDriver" libraryRef="DB2JCC4LIB"/>
	<library apiTypeVisibility="spec,ibm-api,third-party" filesetRef="db2jcc4" id="DB2JCC4LIB"/>
	<fileset dir="/config/db2drivers" id="db2jcc4" includes="db2jcc4.jar db2jcc_license_cu.jar"/>
	<connectionManager id="CM_ERWWDataSourceWithPwd" maxPoolSize="600" minPoolSize="1" connectionTimeout="300s" reapTime="30" maxIdleTime="-1" agedTimeout="85" />
	<connectionManager id="CM_ERWWDataSourceWithJaasAlias" maxPoolSize="600" minPoolSize="1" connectionTimeout="300s" reapTime="30" maxIdleTime="-1" agedTimeout="85" />

	<dataSource id="ERWWDataSourceWithPwd" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/ERWWDataSourceWithPwd" type="javax.sql.XADataSource" connectionManagerRef="CM_ERWWDataSourceWithPwd" statementCacheSize="100">
		<properties.db2.jcc currentSchema="${dbSQLID}" databaseName="${dbName}" driverType="4" password="${dbPassword}" portNumber="${dbPort}" serverName="${DB2HOST}" traceLevel="-1" user="${dbUser}" allowNextOnExhaustedResultSet="1"/>
	</dataSource>
	<dataSource containerAuthDataRef="DBConnectionAlias" id="ERWWDataSourceWithJaasAlias" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/ERWWDataSourceWithJaasAlias" type="javax.sql.XADataSource">
		<properties.db2.jcc currentSchema="${dbSQLID}" databaseName="${dbName}" driverType="4" portNumber="${dbPort}" serverName="${DB2HOST}" allowNextOnExhaustedResultSet="1"/>
	</dataSource>
	<dataSource id="DefaultDataSource" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/DefaultDataSource" type="javax.sql.XADataSource" connectionManagerRef="CM_ERWWDataSourceWithJaasAlias">
		<properties.db2.jcc databaseName="${dbName}" driverType="4" password="${dbPassword}" portNumber="${dbPort}" serverName="${DB2HOST}" useTransactionRedirect="true" user="${dbUser}" allowNextOnExhaustedResultSet="1"/>
	</dataSource>
	
	<!-- DB2 zOS Type 4 Configuration -->
 	<!--
 	<connectionManager id="CM_ERWWDataSourceWithPwd" maxPoolSize="600" minPoolSize="1" connectionTimeout="300s" reapTime="30" maxIdleTime="-1" agedTimeout="85" />
 	<connectionManager id="CM_ERWWDataSourceWithJaasAlias" maxPoolSize="600" minPoolSize="1" connectionTimeout="300s" reapTime="30" maxIdleTime="-1" agedTimeout="85" />
 	<jdbcDriver id="myJDBCDriver" libraryRef="DB2JCC4LIB"/>
 	<library apiTypeVisibility="spec,ibm-api,third-party" filesetRef="db2jcc4" id="DB2JCC4LIB"/>
 	<fileset dir="${jdbcPath}/classes" id="db2jcc4" includes="db2jcc4.jar db2jcc_license_cu.jar"/>

 	<dataSource id="ERWWDataSourceWithPwd" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/ERWWDataSourceWithPwd" type="javax.sql.XADataSource" connectionManagerRef="CM_ERWWDataSourceWithPwd" statementCacheSize="100">
  		<properties.db2.jcc currentSQLID="${dbSQLID}" databaseName="${dbName}" driverType="4" password="${dbPassword}" portNumber="${dbPort}" serverName="${DB2HOST}" traceLevel="-1" user="${dbUser}" allowNextOnExhaustedResultSet="1"/>
 	</dataSource>
 	<dataSource containerAuthDataRef="DBConnectionAlias" id="ERWWDataSourceWithJaasAlias" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/ERWWDataSourceWithJaasAlias" type="javax.sql.XADataSource" connectionManagerRef="CM_ERWWDataSourceWithJaasAlias">
  		<properties.db2.jcc currentSQLID="${dbSQLID}" databaseName="${dbName}" driverType="4" portNumber="${dbPort}" serverName="${DB2HOST}" allowNextOnExhaustedResultSet="1"/>
 	</dataSource>
 	<dataSource id="DefaultDataSource" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/DefaultDataSource" type="javax.sql.XADataSource">
  		<properties.db2.jcc currentSQLID="${dbSQLID}" databaseName="${dbName}" driverType="4" password="${dbPassword}" portNumber="${dbPort}" serverName="${DB2HOST}" user="${dbUser}" allowNextOnExhaustedResultSet="1"/>
 	</dataSource>
	-->
	
	<!-- DB2 zOS Type 2 Configuration -->
 	<!--
 	<connectionManager id="CM_ERWWDataSourceWithPwd" maxPoolSize="600" minPoolSize="1" connectionTimeout="300s" reapTime="30" maxIdleTime="-1" agedTimeout="85" />
 	<connectionManager id="CM_ERWWDataSourceWithJaasAlias" maxPoolSize="600" minPoolSize="1" connectionTimeout="300s" reapTime="30" maxIdleTime="-1" agedTimeout="85" />
 	<jdbcDriver id="DB2T2" libraryRef="DB2T2LibRef"/>
 	<library id="DB2T2LibRef" apiTypeVisability="spec,ibm-api,third-party">
  	<fileset dir="${jdbcPath}/classes" includes="db2jcc4.jar db2jcc_license_cisuz.jar" />
  	<fileset dir="${jdbcPath}/lib" />
 	</library>
 	<dataSource id="ERWWDataSourceWithPwd" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="DB2T2" jndiName="jdbc/ERWWDataSourceWithPwd" type="javax.sql.ConnectionPoolDataSource" connectionManagerRef="CM_ERWWDataSourceWithPwd" statementCacheSize="100">
  		<properties.db2.jcc currentSQLID="${dbSQLID}" databaseName="${dbName}" driverType="2" password="${dbPassword}" traceLevel="-1" user="${dbUser}" allowNextOnExhaustedResultSet="1"/>
 	</dataSource>
 	<dataSource containerAuthDataRef="DBConnectionAlias" id="ERWWDataSourceWithJaasAlias" isolationLevel="TRANSACTION_READ_COMMITTED" jdbcDriverRef="DB2T2" jndiName="jdbc/ERWWDataSourceWithJaasAlias" type="javax.sql.ConnectionPoolDataSource" connectionManagerRef="CM_ERWWDataSourceWithJaasAlias">
  		<properties.db2.jcc currentSQLID="${dbSQLID}" databaseName="${dbName}" driverType="2" allowNextOnExhaustedResultSet="1"/>
 	</dataSource>
 	<dataSource id="DefaultDataSource" jdbcDriverRef="DB2T2" jndiName="jdbc/DefaultDataSource" type="javax.sql.ConnectionPoolDataSource">
  		<properties.db2.jcc currentSQLID="${dbSQLID}" databaseName="${dbName}" driverType="2" password="${dbPassword}" user="${dbUser}" allowNextOnExhaustedResultSet="1"/>
 	</dataSource>
 	-->
	
	<managedScheduledExecutorService jndiName="concurrent/ERWWManagedScheduledExecutor">
		<contextService>
			<classloaderContext/>
			<jeeMetadataContext/>
			<securityContext/>
		</contextService>
	</managedScheduledExecutorService>
	
	<!-- Common JMS Configuration -->
	<connectionManager id="PriceChange_CM" minPoolSize="1" maxPoolSize="400"/>
 	<connectionManager id="Delivery_CM" minPoolSize="1" maxPoolSize="400"/>
 	<connectionManager id="Monitor1.0_CM" minPoolSize="1" maxPoolSize="400"/>
 	<connectionManager id="Monitor1.1_CM" minPoolSize="1" maxPoolSize="400"/>
 	<connectionManager id="NewOrder_CM" minPoolSize="1" maxPoolSize="400"/>
	
	<!-- Embedded messaging engine configuration     	   -->
	<!--                                                       -->
	<!-- Note:  All physical resources in the actual messaging -->
	<!-- engine are named "ME_xxx" below to make it clear they -->
	<!-- are the real resources in the messaging engine, as    -->
	<!-- opposed to the JEE "logical" resources defined below  -->
	<!-- that map the application to these resources.          -->
	<wasJmsEndpoint id="InboundJmsCommsEndpoint" host="*" wasJmsPort="${jmsPort}" wasJmsSSLPort="${jmsSSLPort}"/>
	<messagingEngine>
  		<queue id="ME_PriceChangeRequestQ" forceReliability="ReliablePersistent" maxQueueDepth="5000"> </queue>
  		<queue id="ME_PriceChangeReplyQ" forceReliability="ReliablePersistent" maxQueueDepth="5000"> </queue>
  		<queue id="ME_DeliveryRequestQ" forceReliability="ReliablePersistent" maxQueueDepth="5000"> </queue>
  		<queue id="ME_NewOrderRequestQ" forceReliability="ReliablePersistent" maxQueueDepth="5000"> </queue>
  		<queue id="ME_NewOrderReplyQ" forceReliability="ReliablePersistent" maxQueueDepth="5000"> </queue>
  		<queue id="ME_MonitorQ1.0" forceReliability="ReliablePersistent" maxQueueDepth="5000"> </queue>
  		<queue id="ME_MonitorQ1.1" forceReliability="ReliablePersistent" maxQueueDepth="5000"> </queue>
		<messagingSecurity>
			<role name="tester">
				<queuePermission queueRef="ME_PriceChangeRequestQ">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_PriceChangeReplyQ">
					<action>SEND</action>
					<action>RECEIVE</action>
				</queuePermission>
				<queuePermission queueRef="ME_DeliveryRequestQ">
					<action>SEND</action>
					<action>RECEIVE</action>
				</queuePermission>
				<queuePermission queueRef="ME_NewOrderRequestQ">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_NewOrderReplyQ">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_MonitorQ1.0">
					<action>ALL</action>
				</queuePermission>
				<queuePermission queueRef="ME_MonitorQ1.1">
					<action>ALL</action>
				</queuePermission>
				<tempDestinationPermission prefix="temp">
					<action>CREATE</action>
					<action>SEND</action>
					<action>RECEIVE</action>
				</tempDestinationPermission>
				<!--  Make a different set of temporary permissions to only use in Delivery JMS. -->
				<!--  This is to test that customers can set specific permissions for sub-set of their temporary queues -->
				<tempDestinationPermission prefix="ME.DeReplyQ">
					<action>CREATE</action>
					<action>SEND</action>
					<action>RECEIVE</action>
				</tempDestinationPermission>
				<topicPermission topicSpaceRef="Default.Topic.Space">
					<action>SEND</action>
					<action>RECEIVE</action>
				</topicPermission>
				<user name="persona1"/>
			</role>
		</messagingSecurity>
	</messagingEngine>
	
	<!-- Resources required by the PriceChangeJMSLite transaction.    -->
	<!-- This set of resources uses the "old" (uid/pwd) way of doing  -->
	<!-- connection authentication.                                   -->
	<jmsQueueConnectionFactory jndiName="jms/PriceChangeQueueCF" connectionManagerRef="PriceChange_CM">
		<properties.wasJms password="${jmsPassword}" userName="${jmsUser}"/>
	</jmsQueueConnectionFactory>
	<jmsQueue id="PriceChangeRequestQ" jndiName="jms/PriceChangeRequestQ">
		<properties.wasJms queueName="ME_PriceChangeRequestQ"/>
	</jmsQueue>
	<jmsQueue id="PriceChangeReplyQ" jndiName="jms/PriceChangeReplyQ">
		<properties.wasJms queueName="ME_PriceChangeReplyQ"/>
	</jmsQueue>
	
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec id="jms/PriceChangeActivationSpec">
		<properties.wasJms destinationRef="PriceChangeRequestQ" password="${jmsPassword}" userName="${jmsUser}" maxConcurrency="200"/>
	</jmsActivationSpec>
	
	<!-- Resources required by the DeliveryJMSLite transaction.    -->
	<!-- This set of resources does security authentication using  -->
	<!-- the JaaS security Alias, rather than the older uid/pwd    -->
	<!-- mechanism.                                                -->
	<!--                                                           -->
	<!-- Note: all temporary queues created by the DeliveryQueueCF -->
	<!-- below will have messaging engine assigned names that are  -->
	<!-- prefixed by "ME.DeReplyQ" -->
	<jmsQueueConnectionFactory jndiName="jms/DeliveryQueueCF" connectionManagerRef="Delivery_CM">
		<properties.wasJms temporaryQueueNamePrefix="ME.DeReplyQ"/>
	</jmsQueueConnectionFactory>
	<jmsTopicConnectionFactory jndiName="jms/DeliveryTopicCF">
		<properties.wasJms/>
	</jmsTopicConnectionFactory>
	<jmsQueue id="DeliveryRequestQ" jndiName="jms/DeliveryRequestQ">
		<properties.wasJms queueName="ME_DeliveryRequestQ"/>
	</jmsQueue>
	<jmsTopic id="DeliveryLogTopic" jndiName="jms/DeliveryLogTopic">
		<properties.wasJms topicName="ME_DeliveryLogTopic"/>
	</jmsTopic>
	
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/DeliveryActivationSpec">
		<properties.wasJms destinationRef="DeliveryRequestQ" maxConcurrency="200"/>
	</jmsActivationSpec>
	
	<!-- Resources required by the NewOrderJMSLite transaction.    -->
	<!-- This set of resources does security authentication using  -->
	<!-- the JaaS security Alias, rather than the older uid/pwd    -->
	<!-- mechanism.                                                -->
	<jmsConnectionFactory jndiName="jms/NewOrderCF" connectionManagerRef="NewOrder_CM">
		<properties.wasJms/>
	</jmsConnectionFactory>
	<jmsQueueConnectionFactory jndiName="jms/NewOrderQueueCF">
		<properties.wasJms/>
	</jmsQueueConnectionFactory>
	<jmsTopicConnectionFactory jndiName="jms/NewOrderTopicCF">
		<properties.wasJms/>
	</jmsTopicConnectionFactory>
	<jmsQueue id="NewOrderRequestQ" jndiName="jms/NewOrderRequestQ">
		<properties.wasJms queueName="ME_NewOrderRequestQ"/>
	</jmsQueue>
	<jmsQueue id="NewOrderResponseQ" jndiName="jms/NewOrderReplyQ">
		<properties.wasJms queueName="ME_NewOrderReplyQ"/>
	</jmsQueue>
	<jmsTopic id="NewOrderLogTopic" jndiName="jms/NewOrderLogTopic">
		<properties.wasJms topicName="ME_NewOrderLogTopic"/>
	</jmsTopic>
	
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/NewOrderActivationSpec">
		<properties.wasJms destinationRef="NewOrderRequestQ" maxConcurrency="200"/>
	</jmsActivationSpec>
	
	<!-- Resources required by the WebMonitorTransactionsLite_WebSockets transaction.           -->
	<!-- This set of resources uses the "old" (uid/pwd) way of doing connection authentication. -->
	<jmsQueueConnectionFactory jndiName="jms/MonitorQueueCF1.0" connectionManagerRef="Monitor1.0_CM">
		<properties.wasJms password="${jmsPassword}" userName="${jmsUser}"/>
	</jmsQueueConnectionFactory>
	<jmsQueueConnectionFactory jndiName="jms/MonitorQueueCF1.1" connectionManagerRef="Monitor1.1_CM">
		<properties.wasJms password="${jmsPassword}" userName="${jmsUser}"/>
	</jmsQueueConnectionFactory>
	<jmsQueue id="jms/MonitorQ1.0" jndiName="jms/MonitorQ1.0">
		<properties.wasJms queueName="ME_MonitorQ1.0"/>
	</jmsQueue>
	<jmsQueue id="jms/MonitorQ1.1" jndiName="jms/MonitorQ1.1">
		<properties.wasJms queueName="ME_MonitorQ1.1"/>
	</jmsQueue>
	
	<!-- Note that Liberty does not allow JNDI names for activation specs so we have -->
	<!-- a funny looking id field below to match the binding name in the MDB         -->
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/WebSocketsMonitorActiviationSpec1.0">
		<properties.wasJms destinationRef="jms/MonitorQ1.0"/>
	</jmsActivationSpec>
	<jmsActivationSpec authDataRef="JMSConnectionAlias" id="jms/WebSocketsMonitorActiviationSpec1.1">
		<properties.wasJms destinationRef="jms/MonitorQ1.1"/>
	</jmsActivationSpec>
	
	<!-- MQ Configuration, uncomment section to use MQ instead -->
 	<!-- of embedded and comment embedded JMS section.         -->
 	<!-- Note:  All physical resources in the actual messaging -->
 	<!-- engine are named "MQ_xxx" below to make it clear they -->
 	<!-- are the real resources in the messaging engine, as    -->
 	<!-- opposed to the JEE "logical" resources defined below  -->
 	<!-- that map the application to these resources.          -->
 	<!-- Comment out either the CLIENT lines or the BINDINGS   -->
 	<!-- lines depending on configuration.                     -->
 	<!-- 
 	<resourceAdapter id="mqJms" location="${wmqJmsClient.rar.location}"/>
 	<jmsQueueConnectionFactory jndiName="jms/PriceChangeQueueCF" connectionManagerRef="PriceChange_CM" containerAuthDataRef="JMSConnectionAlias">
  		<properties.wmqJms transportType="CLIENT" hostName="${mqHost}" port="${mqPort}" channel="${mqChannel}" queueManager="${mqQueueManager}" />
 	</jmsQueueConnectionFactory>
 	<jmsQueue id="PriceChangeRequestQ" jndiName="jms/PriceChangeRequestQ">
 		<properties.wmqJms baseQueueName="MQ_PriceChangeRequestQ" />
 	</jmsQueue>
 	<jmsQueue id="PriceChangeReplyQ" jndiName="jms/PriceChangeReplyQ">
  		<properties.wmqJms baseQueueName="MQ_PriceChangeReplyQ" />
 	</jmsQueue>
 	<jmsActivationSpec id="jms/PriceChangeActivationSpec" authDataRef="JMSConnectionAlias">
  		<properties.wmqJms destinationRef="PriceChangeRequestQ" maxPoolDepth="200" transportType="CLIENT" queueManager="${mqQueueManager}" hostName="${mqHost}" channel="${mqChannel}" port="${mqPort}"/>
 	</jmsActivationSpec>

	<jmsQueueConnectionFactory jndiName="jms/DeliveryQueueCF" connectionManagerRef="Delivery_CM" containerAuthDataRef="JMSConnectionAlias">
  		<properties.wmqJms transportType="CLIENT" hostName="${mqHost}" port="${mqPort}" channel="${mqChannel}" queueManager="${mqQueueManager}" />
 	</jmsQueueConnectionFactory>
 	<jmsTopicConnectionFactory jndiName="jms/DeliveryTopicCF" containerAuthDataRef="JMSConnectionAlias" >
  		<properties.wmqJms transportType="CLIENT" hostName="${mqHost}" port="${mqPort}" channel="${mqChannel}" queueManager="${mqQueueManager}" />
 	</jmsTopicConnectionFactory>
 	<jmsQueue id="DeliveryRequestQ" jndiName="jms/DeliveryRequestQ">
  		<properties.wmqJms baseQueueName="MQ_DeliveryRequestQ" />
	</jmsQueue>
 	<jmsTopic id="DeliveryLogTopic" jndiName="jms/DeliveryLogTopic">
  		<properties.wmqJms baseTopicName="MQ_DeliveryLogTopic" />
 	</jmsTopic>
 	<jmsActivationSpec id="jms/DeliveryActivationSpec" authDataRef="JMSConnectionAlias">
  		<properties.wmqJms destinationRef="DeliveryRequestQ" maxPoolDepth="200" transportType="CLIENT" queueManager="${mqQueueManager}" hostName="${mqHost}" channel="${mqChannel}" port="${mqPort}" />
 	</jmsActivationSpec>

 	<jmsConnectionFactory jndiName="jms/NewOrderCF" connectionManagerRef="NewOrder_CM">
  		<properties.wmqJms transportType="CLIENT" hostName="${mqHost}" port="${mqPort}" channel="${mqChannel}" queueManager="${mqQueueManager}" />
 	</jmsConnectionFactory>
 	<jmsQueue id="NewOrderRequestQ" jndiName="jms/NewOrderRequestQ">
  		<properties.wmqJms baseQueueName="MQ_NewOrderRequestQ" />
 	</jmsQueue>
 	<jmsQueue id="NewOrderReplyQ" jndiName="jms/NewOrderReplyQ">
  		<properties.wmqJms baseQueueName="MQ_NewOrderReplyQ" />
 	</jmsQueue>
	<jmsTopic id="NewOrderLogTopic" jndiName="jms/NewOrderLogTopic">
  		<properties.wmqJms baseTopicName="MQ_NewOrderLogTopic" />
 	</jmsTopic>
 	<jmsActivationSpec id="jms/NewOrderActivationSpec" authDataRef="JMSConnectionAlias">
  		<properties.wmqJms destinationRef="NewOrderRequestQ" maxPoolDepth="200" transportType="CLIENT" queueManager="${mqQueueManager}" hostName="${mqHost}" channel="${mqChannel}" port="${mqPort}" />
 		<properties.wmqJms desinationRef="NewOrderRequestQ" maxPoolDepth="200" transportType="BINDINGS" queueManager="${mqQueueManager}" />
 	</jmsActivationSpec>

 	<jmsQueueConnectionFactory jndiName="jms/MonitorQueueCF1.0" connectionManagerRef="Monitor1.0_CM">
  		<properties.wmqJms userName="${jmsUser}" password="${jmsPassword}" transportType="CLIENT" hostName="${mqHost}" port="${mqPort}" channel="${mqChannel}" queueManager="${mqQueueManager}" />
  		<properties.wmqJms userName="${jmsUser}" password="${jmsPassword}" transportType="BINDINGS" queueManager="${mqQueueManager}" />
 	</jmsQueueConnectionFactory>
 	<jmsQueue id="MonitorQ1.0" jndiName="jms/MonitorQ1.0">
  		<properties.wmqJms baseQueueName="MQ_MonitorQ1.0" />
 	</jmsQueue>
 	<jmsActivationSpec id="jms/WebSocketsMonitorActiviationSpec1.0" authDataRef="JMSConnectionAlias">
  		<properties.wmqJms destinationRef="MonitorQ1.0" maxPoolDepth="200" transportType="CLIENT" queueManager="${mqQueueManager}" hostName="${mqHost}" channel="${mqChannel}" port="${mqPort}"/>
 		<properties.wmqJms destinationRef="MonitorQ1.0" maxPoolDepth="200" transportType="BINDINGS" queueManager="${mqQueueManger}" /> 
 	</jmsActivationSpec>

 	<jmsQueueConnectionFactory jndiName="jms/MonitorQueueCF1.1" connectionManagerRef="Monitor1.1_CM">
  		<properties.wmqJms userName="${jmsUser}" password="${jmsPassword}" transportType="CLIENT" hostName="${mqHost}" port="${mqPort}" channel="${mqChannel}" queueManager="${mqQueueManager}" />
  		<properties.wmqJms userName="${jmsUser}" password="${jmsPassword}" transportType="BINDINGS" queueManager="${mqQueueManager}" />
 	</jmsQueueConnectionFactory>
 	<jmsQueue id="MonitorQ1.1" jndiName="jms/MonitorQ1.1">
  		<properties.wmqJms baseQueueName="MQ_MonitorQ1.1" />
 	</jmsQueue>
 	<jmsActivationSpec id="jms/WebSocketsMonitorActiviationSpec1.1" authDataRef="JMSConnectionAlias">
		<properties.wmqJms destinationRef="MonitorQ1.1" maxPoolDepth="200" transportType="CLIENT" queueManager="${mqQueueManager}" hostName="${mqHost}" channel="${mqChannel}" port="${mqPort}"/>
  		<properties.wmqJms destinationRef="MonitorQ1.1" maxPoolDepth="200" transportType="BINDINGS" queueManager="${mqQueueManger}" />
 	</jmsActivationSpec>
	 -->

	<!--  Security configuration -->
	<!-- Common security setup -->
 	<authData id="JMSConnectionAlias" password="${jmsPassword}" user="${jmsUser}"/>
 	<authData id="DBConnectionAlias" password="${dbPassword}" user="${dbUser}"/>
 	<wsSecurityClient internal.properties="" ws-security.password="${wsPassword}" ws-security.username="${wsUser}"/>

	<!--  Basic Registry Security Configuration -->	
	<!--
	<basicRegistry id="BasicRealm" realm="BasicRealm">
		<user name="wsadmin" password="{xor}LDo8Ki02KyY="/>
		<user name="persona1" password="{xor}Ly86LSwwMT5u"/>
		<user name="persona11" password="{xor}Ly86LSwwMT5ubg=="/>
		<user name="persona21" password="{xor}Ly86LSwwMT5tbg=="/>
		<user name="user1" password="{xor}LDo8Ki02KyY="/>
		<user name="user11" password="{xor}LDo8Ki02KyY="/>
		<user name="user21" password="{xor}LDo8Ki02KyY="/>
		<group name="g11-20">
			<member name="persona11"/>
		</group>
		<group name="group11">
			<member name="user11"/>
		</group>
	</basicRegistry>
	<administrator-role>
		<user>wsadmin</user>
	</administrator-role>
	-->

	<ldapRegistry baseDN="${ldapBaseDN}" host="${ldapHost}" id="ldapConfig" ldapType="${ldapType}" port="${ldapPort}" reuseConnection="true">
		<failoverServers name="tdir_backupserver">
   			<server host="${ldapBackupHost}" port="${ldapBackupPort}" />
  		</failoverServers>
	</ldapRegistry>
	
	<!-- Distributed SSL -->
	<ssl id="defaultSSLConfig" keyStoreRef="defaultKeyStore" sslProtocol="TLSv1.2"/>
	<keyStore id="defaultKeyStore" />
		
	<!-- zOS SSL + other config -->
 	<!--
 	<safRegistry id="saf" realm="safrealm" />
 	<safAuthorization id="saf" />
 	<safRoleMapper toUpperCase="false" />
 	<sslDefault sslRef="defaultSSLConfig" />
 	<ssl id="defaultSSLConfig" keyStoreRef="defaultKeyStore" trustStoreRef="defaultTrustStore" />
 	<keyStore id="defaultKeyStore" location="safkeyringjce:///WLPRING" type="JCERACFKS" password="{xor}Lz4sLCgwLTs=" fileBased="false" readOnly="true"/>
 	<keyStore id="defaultTrustStore" location="safkeyringjce:///WLPRING" type="JCERACFKS" password="{xor}Lz4sLCgwLTs=" fileBased="false" readOnly="true"/>
 	<syncToOSThread appEnabled="true" j2cEnabled="true" />
 	<wlmClassification>
  		<httpClassification transactionClass="LBRTSERV" host="*" port="*" resource="*" />
 	</wlmClassification>
 	<nativeTransactionManager shutdownTimeout="30s" />
 	<zosLogging enableLogToMVS="true" />
 	-->
	
	<!-- Enable for HTTP Session Persistence -->
	<!-- 
 	<connectionManager id="sessPool" maxPoolSize="0" minPoolSize="1" connectionTimeout="3m"/>
 	<dataSource id="SessionDS" jdbcDriverRef="myJDBCDriver" jndiName="jdbc/sessions" type="javax.sql.ConnectionPoolDataSource" connectionManagerRef="sessPool">
  		<properties.db2.jcc driverType="4" databaseName="${dbName}" user="${dbUser}" password="${dbPassword}" currentSchema="${dbSQLID}" serverName="${dbHost}" portNumber="${dbPort}" />
 	</dataSource>
 	<httpSessionDatabase id="SessionDB" dataSourceRef="SessionDS" tableName="SESSIONS" />
	-->
	
	<!-- Common logging requests for ERWW -->
	<!-- 
	<logging traceSpecification="*=info=enabled:com.ibm.ws.cache.*=all=enabled:com.ibm.wsspi.cache.*=all=enabled"/> 
 	<logging consoleLogLevel="WARNING"/>
	<logging traceSpecification="*=info=enabled:com.ibm.ws.webcontainer*=all:com.ibm.wsspi.webcontainer*=all:HTTPChannel=all:TCPChannel=all:GenericBNF=all" maxFileSize="80" maxFiles="10" traceFormat="BASIC"/>
	<logging traceSpecification="*=info=enabled:com.ibm.ws.jdbc.*=all=enabled:com.ibm.ws.rsadapter.*=all=enabled:com.ibm.ejs.j2c.*=all=enabled"/> 
	<logging traceSpecification="*=info=enabled:WAS.j2c=all=enabled:RRA=all=enabled:Transaction=all=enabled"/>
	<logging traceSpecification="*=info:com.ibm.ws.db2.logwriter=all" />
	<logging traceSpecification="*=info=enabled:WAS.j2c=all=enabled:RRA=all=enabled:Transaction=all=enabled"/>
	<logging traceSpecification="*=info:JCDI=all:com.ibm.ws.cdi*=all:org.jboss.*=all:Injection=all"/>
	<logging traceSpecification="*=info:JCDI=all:com.ibm.ws.cdi*=all:org.jboss.*=all:Injection=all"/>
	<logging traceSpecification="*=info:BeanValidation=all:beanvalidation.*=all:org.apache.bval.*=all"/>
	<logging traceSpecification="*=info:JCDI=all:com.ibm.ws.cdi*=all:com.ibm.ws.weld*=all:org.jboss.*=all:Injection=all:EJBContainer=all"/>
	<logging traceSpecification="*=info:BeanValidation=all:beanvalidation.*=all:org.apache.bval.*=all"/>
	<logging traceSpecification="*=info:Transaction=all:JCDI=all:com.ibm.ws.cdi*=all:org.jboss.*=all:Injection=all"/>   
	<logging traceSpecification="*=info:JPA=all"/>  
	<logging traceSpecification="JCDI=all:com.ibm.ws.cdi*=all:com.ibm.ws.weld*=all:org.jboss.*=all"/>   
	<logging traceSpecification="*=info:BeanValidation=all:beanvalidation.*=all:org.apache.bval.*=all"/>
	<logging maxFileSize="0" maxFiles="1" traceSpecification="JCDI=all:beanValidation=all"/>
	<logging traceSpecification="com.ibm.ws.kernel.feature.internal.Provisioner=all"/>
 	-->
	
	<!-- Application configuration -->
    	<enterpriseApplication id="ERWW_Lite_WS_Client_EAR" location="${clientEarName}" name="ERWW_Lite_WS_Client_EAR">
      		<classloader apiTypeVisibility="spec,ibm-api,third-party"/>
    	</enterpriseApplication>

    	<enterpriseApplication id="ERWW_Lite_EAR" location="${erwwEarName}" name="ERWW_Lite_EAR">
        	<classloader apiTypeVisibility="ibm-api,spec,third-party" commonLibraryRef="${jdbcLibraryName}"/>
    	</enterpriseApplication>

</server>
