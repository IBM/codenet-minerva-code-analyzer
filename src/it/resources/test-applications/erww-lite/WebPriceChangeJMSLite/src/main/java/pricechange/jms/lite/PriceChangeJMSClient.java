package pricechange.jms.lite;

import irwwbase.ExtendedRandom;
import irwwbase.IRWWBase;
import irwwbase.MaxValues;

import jakarta.jms.JMSException;
import jakarta.jms.MapMessage;
import jakarta.jms.Message;
import jakarta.jms.Queue;
import jakarta.jms.QueueConnection;
import jakarta.jms.QueueConnectionFactory;
import jakarta.jms.QueueReceiver;
import jakarta.jms.QueueSender;
import jakarta.jms.QueueSession;
import jakarta.jms.Session;
import jakarta.jms.TextMessage;

import java.math.RoundingMode;

import javax.naming.InitialContext;

import com.ibm.websphere.cache.DistributedMap;
import com.ibm.websphere.cache.DynamicCacheAccessor;

// Liberty does not have an I18N service yet
//import com.ibm.websphere.i18n.context.Internationalization;
//import i18nPackage.I18nService;
//import java.util.Locale;
//import java.util.PropertyResourceBundle;
//import java.util.ResourceBundle;

/**
 * Insert the type's description here.
 * Creation date: (7/12/2001 2:59:28 PM)
 * @author: Administrator
 */
public class PriceChangeJMSClient extends IRWWBase {

	/**
	 * Autogenerated UID
	 */
	private static final long serialVersionUID = -4869062299094223516L;
	private boolean mustGenerateInput = false;
	private InitialContext ctx = null;
	private QueueConnectionFactory qConnectionFactory = null;
	private QueueConnection qConnection = null;
	private QueueSession qSession = null;
	private QueueSender qSender = null;
	private QueueReceiver qReceiver = null;
	private Queue requestQueue = null;
	private Queue replyQueue = null;

	private java.lang.String command = null;
	private java.lang.String msgSize = null;
	private java.lang.String largeMsgSize = null;
	private String itemId = null;
	private String price = null;

	private String output = null;
	private Throwable exception = null;
	private java.lang.String messageId = null;

	private DistributedMap map = null;	

	private String status="FAILED";

	//I18nService declarations
	// Liberty does not have an I18N service yet
	//protected I18nService i18n; 
	//protected Internationalization callerI18n;
	//protected Locale locale;

	/**
	 * Client constructor comment.
	 */
	public PriceChangeJMSClient() {
		super();
	}

	public void generateInput() {

		debugOut("<< Randomly generate itemId");
		ExtendedRandom rand = new ExtendedRandom();

		int intId =	rand.nextInt(1,MaxValues.itemId(this.dbSize())); 

		itemId = Integer.valueOf(intId).toString(); 

		debugOut("<< Randomly generate price ");
		double newPrice = rand.nextDouble(MaxValues.itemPrice((byte) 1));
		if (newPrice >= 1000)
			newPrice = 999.99;
		price =
				(new java.math.BigDecimal(newPrice))
				.setScale(2, RoundingMode.HALF_UP)
				.toString();

		debugOut("<< itemId = " + itemId);
		debugOut("<< price = " + price);
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/12/2001 3:09:14 PM)
	 */
	public void setupJMS() throws Exception {

		// Outer try block to catch unexpected exceptions
		try {

			debugOut("<< Enter setupJMS() in Client");
			debugOut("<<< Before Initial Context");
			try {
				ctx = new InitialContext();
			} catch (Exception e) {
				System.out.println("Unable to create Initial Context in setupJMS() method of PriceChangeJMSClient: " + e);
				e.printStackTrace();
				throw new Exception("Unable to create Initial Context in setupJMS() method of PriceChangeJMSClient: " + e);
			}

			debugOut("<<< Before connectionFactory & queue lookups >>");

			try {
				if (qConnectionFactory == null)
					qConnectionFactory = (QueueConnectionFactory) ctx.lookup("java:comp/env/jms/PriceChangeQCF");

				if (requestQueue == null)
					requestQueue = (Queue) ctx.lookup("java:comp/env/jms/PriceChangeRequestQ");

				if (replyQueue == null)
					replyQueue = (Queue) ctx.lookup("java:comp/env/jms/PriceChangeReplyQ");	

			} catch (Exception e) {
				System.out.println("Unable to lookup a JMS resource in setupJMS() method of PriceChangeJMSClient: " + e);
				e.printStackTrace();
				throw new Exception("Unable to lookup a JMS resource in setupJMS() method of PriceChangeJMSClient: " + e);
			}

			debugOut("<<< Before createConnection >>");

			try {
				if (qConnectionFactory == null) {
					debugOut("<< Connection factory pointer is null in setupJMS() method of PriceChangeJMSClient >>");
					throw new Exception("<< Connection factory pointer is null in setupJMS() method of PriceChangeJMSClient");
				}
				debugOut("<<< Before createQueueConnection >>");
				qConnection = qConnectionFactory.createQueueConnection();	

			} catch (JMSException j) {
				System.out.println("JMS Exception creating connection in setupJMS() method of PriceChangeJMSClient: " + j);
				j.printStackTrace();
				throw new Exception("JMS Exception creating connection in setupJMS() method of PriceChangeJMSClient: " + j);			
			}

			debugOut("<<< Before createQueueSession >>");

			try {
				qSession = qConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
			} catch (JMSException j) {
				System.out.println("JMS Exception creating session in setupJMS() method of PriceChangeJMSClient: " + j);
				j.printStackTrace();
				throw new Exception("JMS Exception creating session in setupJMS() method of PriceChangeJMSClient: " + j);
			}

			debugOut("<<< Before createSender >>");
			try {
				qSender = qSession.createSender(requestQueue);
				//receiver = session.createConsumer(tempQ);
			} catch (JMSException j) {
				System.out.println("JMS Exception creating sender in setupJMS() method of PriceChangeJMSClient: " + j);
				j.printStackTrace();
				throw new Exception("JMS Exception creating sender in setupJMS() method of PriceChangeJMSClient: " + j);			
			}

			debugOut("<<< Before connection.start() >>");
			try {
				if (qConnection != null)
					qConnection.start();
				else {
					debugOut("<< Connection is null in setupJMS() method of PriceChangeJMSClient >>");
					throw new Exception("Connection is null in setupJMS() method of PriceChangeJMSClient");
				}
			} catch (JMSException j) {
				System.out.println("JMS Exception starting connection in setupJMS() method of PriceChangeJMSClient: " + j);
				j.printStackTrace();
				throw new Exception("JMS Exception starting connection in setupJMS() method of PriceChangeJMSClient: " + j);		
			}

		} catch (Throwable t) {
			System.out.println("Unexpected Exception in setupJMS() method of PriceChangeJMSClient: " + t);
			t.printStackTrace();
			throw new Exception("Unexpected Exception in setupJMS() method of PriceChangeJMSClient: " + t);
			
		} finally {
			
			debugOut("<< Exit setupJMS() in Client");
		}

	}  //End setupJMS

	// Business logic when manual input is used (ie. no auto generation of input data required)
	public void webManualInput() throws Exception {

		mustGenerateInput = false;
		webBusinessLogic();
	}

	// Business logic when auto generation of input data is required
	public void webAutoGenInput() throws Exception {

		mustGenerateInput = true;
		webBusinessLogic();
	}		


	// Common business logic shared by both the webAutoGenInput(), and webManualInput() methods	
	public void webBusinessLogic() throws Exception {

		// Liberty does not support an I18N service so remove this code for now
		//I18nService i18n = new I18nService();
		//i18n.setSessionContext();
		//i18n.setResourceBundle();
		//locale=i18n.getLocale();
		//java.text.DateFormat df = java.text.DateFormat.getDateInstance (java.text.DateFormat.DEFAULT, locale);
		//java.text.DateFormat tf = java.text.DateFormat.getTimeInstance (java.text.DateFormat.DEFAULT, locale);
		//java.text.NumberFormat nf = java.text.NumberFormat.getCurrencyInstance(locale);
		
		debugOut("< Start of webBusinessLogic() method >");

		int maxNumberOfItemIds = 15;  //Need to invalidate itemId1 through itemId15

		String ms;

		if (msgSize.trim().equals("L"))
			ms = "L";
		else if (msgSize.trim().equals("S"))
			ms = "S";
		else
			ms = "S";

		// setup the JMS resources used by this client
		setupJMS();

		try {
			if (mustGenerateInput){
				generateInput();
			}   
			MapMessage message = null;
			try {
				message = qSession.createMapMessage();
				message.setString("itemId", itemId);
				message.setString("price", price);
				message.setString("messageSize", ms);
				message.setString("largeMessageSize",getLargeMsgSize());
			} catch (Exception e) {
				debugOut("<<< Exception building map message in webBusinessLogic() method of PriceChangeJMSClient: " + e + " >>>");
				e.printStackTrace();
				throw new Exception("Exception building map message in webBusinessLogic() method of PriceChangeJMSClient: " + e);
			}

			message.setJMSReplyTo(replyQueue);	

			debugOut("<< before send of message to PriceChange request queue ");
			qSender.send(message);

			// Grab message ID from sent message to use for correlation of response message from MDB.
			messageId = message.getJMSMessageID();

			debugOut("<< dump of Msg JMS PriceChange client sent: " + message.toString());


		} catch (JMSException j) {
			System.out.println("JMS Exception sending message in webBusinessLogic() method of PriceChangeJMSClient: " + j);
			j.printStackTrace();
			throw new Exception("JMS Exception sending message in webBusinessLogic() method of PriceChangeJMSClient: " + j);
			
		} catch (Throwable t) {
			System.out.println("Unexpected exception sending message in webBusinessLogic() method of PriceChangeJMSClient: " + t);
			t.printStackTrace();
			throw new Exception("Unexpected exception sending message in webBusinessLogic() method of PriceChangeJMSClient: " + t);
	

		} finally {

			// close the sender down
			try {
				qSender.close();

			} catch (Throwable t) {
				System.out.println("Exception closing sender in PriceChangeJMSClient: " + t);
				t.printStackTrace();		
				throw new Exception("Exception closing sender in PriceChangeJMSClient: " + t);
			}
		} //end finally 

		debugOut("< Entering receive response message (from MDB) section of client >");
		
		// receive code
		long wait = 180000;
		try {
			String selector = "JMSCorrelationID = '" + messageId + "'"; 
			
			debugOut("<< Creating receiver with selector string: " + selector);

			qReceiver = qSession.createReceiver(replyQueue, selector);

			debugOut("<< Before qReceiver.receive(wait) in price change client");

			Message inMessage = qReceiver.receive(wait); // timeout in 3 minutes	   				
			if (inMessage != null) {
				debugOut("<< Before if (inMessage instanceof TextMessage) in Client");
				if (inMessage instanceof TextMessage) {
					
					if ((inMessage.getBooleanProperty("RC")) == true) {	
						
						// If RTC is true the MDB executed fine so keep going
						debugOut("<< Return code in reply message from PriceChange MDB's execution said successful");
						
					} else {
						
						// If RC is false, the MDB had an exception and the exception
						// text was returned in response message we just receive.  Propagate
						// the exception text received to the client here.
						debugOut("<< Throwing exception with error text returned in reply message from PriceChange MDB's execution");
						throw new Exception (((TextMessage) inMessage).getText());
					}

					// continue good path 
					debugOut("<< dump of response Msg JMS PriceChange client received: " + inMessage.toString());
					
					debugOut("<< Before ((TextMessage) inMessage).getText()");
					String replyString = ((TextMessage) inMessage).getText();

					if (replyString.length() < 90) {
						
						// Liberty does not have I18N service, hardcode message to english for now
						//	output[i] = i18n.getMsg("PriceChangeJMS.MessageNumber") + (1 + i) + ": " + replyString;
						
						output = replyString;

					} else {
						
						// Liberty does not have I18N service, hardcode message to english for now
						// output[i] = i18n.getMsg("PriceChangeJMS.MessageNumber") + (1 + i) + ": " + replyString.substring(0, 90);
						
						output = replyString.substring(0, 90);											
					}

					debugOut("<< replyString: " + output);				

				} else {
					//Print error message if Message was not a TextMessage.
					System.out.println("Reply message was not a TextMessage in webBusinessLogic() method of PriceChangeJMSClient");
					throw new Exception("Reply message was not a TextMessage in webBusinessLogic() method of PriceChangeJMSClient");
				}

			} // end if inMessage !=null 
			else 
			{	
				debugOut("<< Reply Message not received.  Timed out waiting " + (wait/1000) + " seconds");
				throw new Exception("Timed out waiting for reply message in webBusinessLogic() of PriceChangeJMSClient");
			}
			
		} catch (JMSException j) {
			System.out.println("JMS Exception in webBusinessLogic() method of PriceChangeJMSClient: " + j);
			j.printStackTrace();
			throw new Exception("JMS Exception in webBusinessLogic() method of PriceChangeJMSClient: " + j);
		}

		catch (Throwable t) {
			// No need to print stack trace here, we are likely re-catching an exception that was already handled.
			System.out.println("Throwable exception in webBusinessLogic() method of PriceChangeJMSClient: " + t);
			throw new Exception("Throwable exception in webBusinessLogic() method of PriceChangeJMSClient: " + t);
		}

		finally {

			// close the queues and disconnect from the qmgr
			try {
				debugOut("<< Before close receiver, session, connection");
				if (qReceiver != null)
					qReceiver.close();
				if (qSession != null)
					qSession.close();
				if (qConnection != null)
					qConnection.close();

			} catch (Throwable t) {
				debugOut("Exception closing queues in webBusinessLogic() method of PriceChangeJMSClient: " + t);
				t.printStackTrace();
				throw new Exception("Exception closing queues in webBusinessLogic() method of PriceChangeJMSClient: " + t);						
			} // end catch

		} //end finally clause

		// At this point the JMS functions have all completed successfully.
		// Invalidate the cache and set status to success.

		//Invalidate the cache for the itemId that the price was changed for
		try {
			if (DynamicCacheAccessor.isServletCachingEnabled()) {
				ctx = new InitialContext();
				map = (DistributedMap) ctx.lookup("services/cache/basecache");
				if (map != null){
					for (int m = 1; m < (maxNumberOfItemIds+1); m++) {
						map.invalidate("itemId"+m+"_ItemTable_Manual:"+itemId);
						debugOut("<< Dynacache Invalidatation in PriceChangeJMS - " + "itemId"+m+"_ItemTable_Manual:"+itemId);

						map.invalidate("itemId"+m+"_ItemTable_AutoGen:"+itemId);
						debugOut("<< Dynacache Invalidatation in PriceChangeJMS - " + "itemId"+m+"_ItemTable_AutoGen:"+itemId);
					}
				}
			}
		} catch (Throwable t) {
			// Something went wrong during invalidation so throw
			// an exception and setting successful status below will skipped).
			debugOut("<< Throwable exception while invalidating cache in webBusinessLogic() method  of PriceChangeJMSClient: " + t);
			t.printStackTrace();
			throw new Exception("Throwable exception while invalidating cache in webBusinessLogic() method of PriceChangeJMSClient: " + t);
		}		

		// If we made it here, there was no exception, so set success
		// Otherwise, the default is already set to FAILED (ie. assume failure unless success)
		setStatus("SUCCESSFUL");
		debugOut("< End of webBusinessLogic() method >");
	}



	public String getCommand() {
		return command;
	}
	public void setCommand(String command) {
		this.command = command;
	}

	/**
	 * Insert the method's description here.
	 * Creation date: (7/12/2001 3:00:03 PM)
	 * @return java.lang.String
	 */
	public java.lang.String getMsgSize() {
		return msgSize;
	}

	/**
	 * Insert the method's description here.
	 * Creation date: (7/12/2001 3:00:03 PM)
	 * @param newMsgSize java.lang.String
	 */
	public void setMsgSize(java.lang.String newMsgSize) {
		msgSize = newMsgSize;
	}


	/**
	 * Insert the method's description here.
	 * Creation date: (7/12/2001 3:18:05 PM)
	 * @return java.lang.String
	 */
	public java.lang.String getOutput() {
		return output;
	}

	/**
	 * Insert the method's description here.
	 * Creation date: (7/12/2001 3:18:05 PM)
	 * @param newOutput java.lang.String
	 */
	public void setOutput(java.lang.String newOutput) {
		output = newOutput;
	}

	public java.lang.String getLargeMsgSize() {
		return largeMsgSize;
	}
	public void setLargeMsgSize(java.lang.String largeMsgSize) {
		this.largeMsgSize = largeMsgSize;
	}

	public java.lang.String getItemId() {
		return itemId;
	}
	public void setItemId(java.lang.String itemId) {
		this.itemId = itemId;
	}

	public java.lang.String getPrice() {
		return price;
	}
	public void setPrice(java.lang.String price) {
		this.price = price;
	}

	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}

	public Throwable getException() {
		return exception;
	}
	public void setException(Throwable t) {
		this.exception = t;
	}

}