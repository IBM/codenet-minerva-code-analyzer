package pricechangesession;

import irwwbase.IRWWBase;
import irwwbase.POJOQualifier;
import irwwbase.UserException;
import itemjpa.ItemJPA;

import java.math.BigDecimal;
import java.math.RoundingMode;

import jakarta.annotation.Resource;
import jakarta.annotation.security.DeclareRoles;
import jakarta.ejb.EJBException;
import jakarta.ejb.LocalBean;
import jakarta.ejb.SessionContext;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.LockModeType;
//import jakarta.persistence.PersistenceContext;
import javax.sql.DataSource;

import produce.ejb.PCEntityManagerQualifier;

import jakarta.inject.Inject;
import jakarta.interceptor.Interceptors;

@Stateless
@LocalBean
@DeclareRoles("PRICECHANGER")
@Resource(name="jdbc/ERWWDataSourceWithPwd", type = DataSource.class, authenticationType = Resource.AuthenticationType.CONTAINER, shareable = true)
public class PriceChangeSessionFacadeBean extends IRWWBase {

	/**
	 * Autogenerated UID
	 */
	private static final long serialVersionUID = -3597148452316628982L;

	//@PersistenceContext(unitName = "PriceChangeEJB")
	//EntityManager em;
	@Inject @PCEntityManagerQualifier EntityManager em;
	
	@Inject @POJOQualifier IRWWBase ib;
	
	@Resource SessionContext ctx;
	
	ItemJPA itemJPA = null;

	private Double max = 1000.;
	private Double ideal = 999.99;
	
	@Interceptors({ PCInterceptor.class })
	public PriceChangeOutput priceChangeSession(ItemJPA input) throws UserException {
		
		// Make sure inRole is reset to false at start of every method call
		boolean inRole = false;
		
		startOfTran("PriceChangeSessionEJB");
			
		PriceChangeOutput output = new PriceChangeOutput();

		debugOut("Running PriceChangeSessionFacadeBean priceChangeSession()");
		
		try {
			itemJPA = em.find(ItemJPA.class, input.getItemId(), LockModeType.PESSIMISTIC_WRITE);
		} catch (Exception e) {
			if (is913(e))
				throw new UserException("<&!@" + checkFor913(e)
						+ ", finding Item JPA, " + e.getCause() + getSTC(),
						getStackTrace(e));
			else
				throw new UserException("<&!@"
						+ "Error while processing PriceChange, "
						+ " exception message: " + e.getMessage()
						+ ", exception cause: " + e.getCause() + getSTC(),
						getStackTrace(e));
		}
		
		if (ctx.isCallerInRole("PRICECHANGER")) {
			inRole = true;
		}	
				
		debugOut("Caller principal: " + ctx.getCallerPrincipal() + " SecurityRole: " + inRole);
		
		if (inRole || input.getItemPrice().doubleValue() < 100 ){
			try {
				debugOut("The User is in Role or the price is less than $100");

				if (itemJPA != null) {
					
					double maxitempr = max.doubleValue();
					double setitempr = ideal.doubleValue();
					if (input.getItemPrice().doubleValue() >= maxitempr) {
						System.out.println("<<< Somehow itemPrice exceeded 999.99, itemPrice ="
										+ input.getItemPrice()
										+ " resetting to 999.99");
						input.setItemPrice(new BigDecimal(setitempr));
					}
					debugOut("Before setting the item price");
					itemJPA.setItemPrice(input.getItemPrice().setScale(2, RoundingMode.DOWN));
					debugOut("After setting the item price");
					
					debugOut(" item entity values, itemId: "
							+ itemJPA.getItemId() + " price: "
							+ itemJPA.getItemPrice());
				} else
					throw new UserException("item not found, item="	+ input.getItemId() + ", " + getSTC(), "no stack");

				itemJPA.setStcnum(irwwbase.Stcnum.getInstance().getStcnum());
				// end
			} catch (Exception e) {
				if (is913(e))
					throw new UserException("<&!@" + checkFor913(e)
							+ ", finding Item JPA, " + e.getCause() + getSTC(),
							getStackTrace(e));
				else
					throw new UserException("<&!@"
							+ "Error while processing PriceChange, "
							+ " exception message: " + e.getMessage()
							+ ", exception cause: " + e.getCause() + getSTC(),
							getStackTrace(e));
			}
			String eMessage="PriceChangeSessionFacadeBean: ItemId: " + itemJPA.getItemId() + 
							"; New Price: "	+ itemJPA.getItemPrice();
			java.io.FileWriter resultFile = null;
			try {
				resultFile = new java.io.FileWriter("priceChangeEvents.log");
				logResultFile("Events: " + eMessage, resultFile);
			} catch (Exception ex) {
				System.out.println("%%%%% ERROR: resultFile = new java.io.FileWriter(results.out) ");
				ex.printStackTrace();
				throw new EJBException("%%%%% ERROR: resultFile = new java.io.FileWriter(results.out) failed  ",ex);
			} 	
			finally {
				try {
					resultFile.close();
				} catch (Exception e) {
					System.out.println("%%%%% ERROR: resultFile failed to close.  Exception = " + e);
					e.printStackTrace();
					throw new EJBException("%%%%% ERROR: resultFile failed to close", e);
				}
			} 
		}
		else {
			debugOut("User " + ctx.getCallerPrincipal().getName() + " is not authorized to change the price of an item if it is greater than $100. " +
				    " Notice that the price has NOT been changed to " + input.getItemPrice().setScale(2, RoundingMode.DOWN)+ ".");

			output.setMessage("User " + ctx.getCallerPrincipal().getName() + " is not authorized to change the price of an item if it is greater than $100. " +
			    " Notice that the price has NOT been changed to " + input.getItemPrice().setScale(2, RoundingMode.DOWN)+ ".");
		}
		output.setItem(itemJPA);
		endOfTran("PriceChangeSessionEJB");
		
		return output;
	}

	public void debugOut(String message) {

		if (System.getProperty("DEBUG_OUT") != null)
			if (System.getProperty("DEBUG_OUT").equals("ON"))
				System.out.println(message);
	}
	
}
